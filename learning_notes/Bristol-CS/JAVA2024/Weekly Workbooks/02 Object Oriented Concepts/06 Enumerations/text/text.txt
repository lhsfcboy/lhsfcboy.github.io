Some shapes (such as Circles) come in only one variant - a Circle is a Circle !
Other shapes however (Triangles for example) can come in range of different variants (Isosceles, Right-angle, Equilateral etc).
We _could_ create a range of subclasses of the `Triangle` class to represent each of these...
However this might be seen as overkill, since the various sub-classes wouldn't have any additional attributes or methods,
so we could end up with a lot of almost empty files (causing unnecessary clutter in our file system !)

Instead, we will use this opportunity to explore another feature of Java - **enumerations**.
In Java there is an enumeration mechanism (very much like that in C).
This allows us to declare a predefined list of values that a variable can hold.
Take a look at the slides and videos above to find out more details regarding enumerations,
then attempt the task described below.

With the knowledge you have gained from these slides and video, add to your `Triangle` Class to make it "self-aware":
so that instances of the class will _know_ what kind of triangle they are.
As a programmer, we aren't going to actually _tell_ the triangle what variant it is, the triangle will work it out for itself
(based on the length of the sides passed into the constructor).

Add some code to your `Triangle` constructor method so that it works out what kind it is and stores the result in a private variable.
We have provided you with an enumeration called `TriangleVariant` (found in the `src/main/java/` folder)
that can be used to differentiate between the various triangle variants. For this task, start out simply by just checking
to see if the triangle is an equilateral (i.e. all sides are exactly the same size) - you will get the chance to implement the
more complex triangle checks in the next task.

If all sides are of equal length, set the variant to be `TriangleVariant.EQUILATERAL`. If the sides are not equal,
leave the variable blank (called `null` in Java) for the time being.

Add a new method `getVariant` to your `Triangle` class so that external objects can find out the type of a particular triangle. 
Make sure your code works by creating a number of different equilateral triangles and checking what is returned when you call their `getVariant` method.
