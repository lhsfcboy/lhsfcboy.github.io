In this next task, you will implement checks for all the other triangle variants.
Rather than manually testing your code (which can get tedious for lots of triangles),
we are going to employ a mechanism for automated testing !
We have provided a <a href="Test Script/TriangleTests.java" target="_blank">triangle test script</a>
that contains a variety of test cases to verify the operation of your triangle variant detection code.
This test file makes use of a testing framework called **JUnit** (which you will learn more about in another unit !)

Download the test script and drop it into the `src/test/java/edu/uob` folder in your project
(be sure to save it with a `.java` extension - some browsers will try to append a `.txt` extension !).
You can run individual test methods by opening the `TriangleTests` file in the IntelliJ editor and then
clicking on the green "play" button to the left of each test method name.
Once the tests have finished running, you should see a report detail which tests have failed
(when tests pass, you don't get much textual feedback - just some green ticks !)

Add additional code to your `Triangle` constructor method that determines the type of triangle being created.
You should implement detection of each type of triangle in turn (first Equilateral, then Isosceles, then Scalene etc.).
Make sure your code passes all of the tests for a particular variant before moving on to the next.
You will need to think carefully however about the order in which your checks for each triangle appear in your code
(e.g. some illegal triangles might at first sight _appear_ to meet the criteria for an isosceles triangle !). 

The final group of tests (to do with overflow) are more difficult, so you should leave those until the end.
Note that these final tests may require you to refactor your code a fair bit (depending on how you wrote it in the first place) !